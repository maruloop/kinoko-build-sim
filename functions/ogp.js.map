{
  "version": 3,
  "sources": ["../src/functions/ogp.ts"],
  "sourcesContent": ["/// <reference types=\"@cloudflare/workers-types\" />\n// import { ImageResponse } from 'workers-og';\n\nexport const onRequestGet: PagesFunction<{ OGP_CACHE: KVNamespace }> = async (context) => {\n  const { request, env } = context;\n  const url = new URL(request.url);\n\n  const title = sanitizeTitle(url.searchParams.get('title') || '\u30AD\u30CE\u30B3\u4F1D\u8AAC\u30D3\u30EB\u30C9\u30B7\u30DF\u30E5\u30EC\u30FC\u30BF\u30FC');\n  const cacheKey = `ogp-${url.searchParams.get('title') || 'default'}`;\n\n  return new Response(cacheKey, {'status': 200});\n\n  // try {\n  //   const cachedResponse = await env.OGP_CACHE.get(cacheKey, 'stream');\n  //   if (cachedResponse) {\n  //     return new Response(cachedResponse, {\n  //       headers: {\n  //         'Content-Type': 'image/png',\n  //         'Cache-Control': 'public, max-age=86400',\n  //       }\n  //     });\n  //   }\n\n  //   const response = new ImageResponse(generateHTML(title), {\n  //     width: 1200,\n  //     height: 630\n  //   });\n\n  //   const blob = await response.blob();\n  //   await env.OGP_CACHE.put(cacheKey, blob.stream(), {\n  //     expirationTtl: 86400,\n  //   });\n\n  //   return new Response(blob, {\n  //     headers: {\n  //       'Content-Type': 'image/png',\n  //       'Cache-Control': 'public, max-age=86400'\n  //     }\n  //   });\n  // } catch (e) {\n  //   console.error(e);\n  //   return new Response('OGP\u753B\u50CF\u751F\u6210\u30A8\u30E9\u30FC', { status: 500 });\n  // }\n};\n\nfunction generateHTML(title: string): string {\n  return `\n    <html>\n      <head>\n        <style>\n          body {\n            width: 1200px;\n            height: 630px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-family: 'Arial', sans-serif;\n            background-color: #f9f9f9;\n            margin: 0;\n          }\n          .container {\n            text-align: center;\n          }\n          .title {\n            font-size: 64px;\n            color: #333;\n            margin: 0;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <h1 class=\"title\">${escapeHTML(title)}</h1>\n        </div>\n      </body>\n    </html>\n  `;\n}\n\nfunction sanitizeTitle(title: string): string {\n  return title.length > 25 ? title.slice(0, 25) + '\u2026' : title;\n}\n\nfunction escapeHTML(str: string): string {\n  return str.replace(/[&<>\"']/g, (match) => ({\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n  }[match] || match));\n}\n"],
  "mappings": "AAGO,IAAMA,EAA0D,MAAOC,GAAY,CACxF,GAAM,CAAE,QAAAC,EAAS,IAAAC,CAAI,EAAIF,EACnBG,EAAM,IAAI,IAAIF,EAAQ,GAAG,EAEzBG,EAAQC,EAAcF,EAAI,aAAa,IAAI,OAAO,GAAK,4FAAiB,EACxEG,EAAW,OAAOH,EAAI,aAAa,IAAI,OAAO,GAAK,SAAS,GAElE,OAAO,IAAI,SAASG,EAAU,CAAC,OAAU,GAAG,CAAC,CAiC/C,EAoCA,SAASC,EAAcC,EAAuB,CAC5C,OAAOA,EAAM,OAAS,GAAKA,EAAM,MAAM,EAAG,EAAE,EAAI,SAAMA,CACxD",
  "names": ["onRequestGet", "context", "request", "env", "url", "title", "sanitizeTitle", "cacheKey", "sanitizeTitle", "title"]
}
